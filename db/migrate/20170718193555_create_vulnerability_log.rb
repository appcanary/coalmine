class CreateVulnerabilityLog < ActiveRecord::Migration
  def up
    execute <<-SQL
CREATE MATERIALIZED VIEW vulnerability_logs AS
SELECT log_bundle_vulnerabilities.bundle_id AS bundle_id,
       log_bundle_vulnerabilities.vulnerability_id as vulnerability_id,
       log_bundle_vulnerabilities.vulnerable_dependency_id as vulnerable_dependency_id,
       min(log_bundle_vulnerabilities.created_at) as occured_at,
       count(log_bundle_vulnerabilities.id) <=  count(log_bundle_patches.id) as patched,
       CASE WHEN count(log_bundle_vulnerabilities.id) <=  count(log_bundle_patches.id) THEN max(log_bundle_patches.created_at) ELSE NULL END as patched_at,
       every(log_bundle_vulnerabilities.supplementary) as supplementary


FROM log_bundle_vulnerabilities LEFT JOIN log_bundle_patches ON
          log_bundle_patches.bundle_id = log_bundle_vulnerabilities.bundle_id AND
          log_bundle_patches.bundled_package_id = log_bundle_vulnerabilities.bundled_package_id AND
          log_bundle_patches.package_id = log_bundle_vulnerabilities.package_id AND
          log_bundle_patches.vulnerability_id = log_bundle_vulnerabilities.vulnerability_id AND
          log_bundle_patches.vulnerable_dependency_id = log_bundle_vulnerabilities.vulnerable_dependency_id AND
          log_bundle_patches.vulnerable_package_id = log_bundle_vulnerabilities.vulnerable_package_id

GROUP BY log_bundle_vulnerabilities.bundle_id, log_bundle_vulnerabilities.vulnerability_id, log_bundle_vulnerabilities.vulnerable_dependency_id
SQL


  add_index :vulnerability_logs, :patched_at
  add_index :vulnerability_logs, [:bundle_id, :vulnerability_id, :vulnerable_dependency_id], unique: true, name: "index_vulnerability_logs_on_uniq_keys"
  add_index :vulnerability_logs, [:bundle_id, :vulnerability_id, :vulnerable_dependency_id], unique: true, where: "patched is false", name: "index_unpatched_vulnerability_logs_on_uniq_keys"
  end
  def down
    execute "DROP MATERIALIZED VIEW vulnerability_logs"
  end

end
