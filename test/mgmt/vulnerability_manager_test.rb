require 'test_helper'
class VulnerabilityManagerTest < ActiveSupport::TestCase
  test "upon new vuln, should update affected packages" do
    pkg_name = "fakemctest"
    10.times do |i|
      FactoryGirl.create(:ruby_package,
                         :name => pkg_name,
                         :version => "1.0.#{i}")
    end

    assert_equal 10, Package.count
    assert_equal 0, VulnerablePackage.count

    vuln = VulnerabilityManager.new.create(:package_name => pkg_name,
                                    :package_platform => Platforms::Ruby,
                                    :patched_versions => ["> 1.0.4"])

    assert_equal 1, Vulnerability.count
    assert_equal 5, vuln.packages.count

    FactoryGirl.create(:ruby_vulnerability)

    assert_equal 2, Vulnerability.count
    assert_equal 5, VulnerablePackage.count
  end

  test "update_affecting_vulnerabilities" do
    v1, v2, _ = FactoryGirl.create_list(:ruby_vulnerability, 5)

    v1.patched_versions = ["> 1.0.1"]
    v1.save

    p1 = FactoryGirl.create(:ruby_package, 
                            :name => v1.package_name,
                            :version => "1.0.0")


    assert_equal 0, VulnerablePackage.count
    assert_equal 1, Package.count
    VulnerabilityManager.new.update_affecting_vulnerabilities!(Vulnerability.all, p1)

    v1.reload
    assert_equal 1, VulnerablePackage.count
    assert v1.packages.include?(p1)
  end

  test "when we create a vuln that targets bundled packages, ensure we also add a LogBundleVulnerability" do
    pkg = FactoryGirl.create(:ruby_package)
    bundle = FactoryGirl.create(:bundle, :packages => [pkg])

    vuln = VulnerabilityManager.new.create(:package_name => pkg.name,
                                           :package_platform => pkg.platform,
                                           :patched_versions => ["> #{pkg.version}"])

    assert_equal 1, VulnerablePackage.count
    assert_equal 1, BundledPackage.count
    assert_equal 1, LogBundleVulnerability.where(:bundle_id => bundle.id).count
  end
end
