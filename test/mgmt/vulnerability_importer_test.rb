require 'test_helper'
class VulnerabilityImporterTest < ActiveSupport::TestCase
  it "should convert advisories to vulns" do
    adv = FactoryGirl.create(:advisory, :ruby,
                             :title => "Lol",
                             :source => "Test",
                             :constraints => [{:package_name => "foo", 
                                               :patched_versions => ["> 1.0.2"]}])


    assert_equal false, adv.advisory_import_state.processed
    vi = VulnerabilityImporter.new(Platforms::Ruby, "Test")

    assert_equal 0, Vulnerability.count
    res, errors = vi.import

    assert_equal 1, Vulnerability.count
    assert_equal 1, Vulnerability.first.vulnerable_dependencies.count
    assert errors.nil?
    
    adv.reload
    assert_equal true, adv.advisory_import_state.processed

    adv.advisory_import_state.processed = false
    adv.title = "something else"
    adv.constraints = [
      {:package_name => "foo", 
       :patched_versions => ["> 2.0.0"]},
      {:package_name => "foo2",
       :patched_versions => ["> 1.0.0"]}
    ]
    adv.save

    res, errors = vi.import
    assert errors.nil?

    assert_equal 1, Vulnerability.count
    vuln = Vulnerability.first
    assert_equal "something else", vuln.title
    assert_equal 2, vuln.vulnerable_dependencies.count

    vd = vuln.vulnerable_dependencies.first
    assert_equal "> 2.0.0", vd.patched_versions.first

    adv.reload
    assert_equal true, adv.advisory_import_state.processed


    # OK, let's force this to trigger some error
    VulnerabilityManager.any_instance.stubs(:update).returns(ResultObject::Result.new(nil, "NOPE"))

    adv.advisory_import_state.processed = false
    adv.save!

    vi = VulnerabilityImporter.new(Platforms::Ruby, "Test")
    res, errors = vi.import
    assert errors.present?
    assert_equal "Error: advisory ##{adv.id} - NOPE", errors.first.message
  end
end
