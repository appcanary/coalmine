class VulnerabilityLog < ActiveRecord::Base
  self.table_name = "vulnerability_logs"

  belongs_to :bundle
  belongs_to :vulnerability
  belongs_to :vulnerable_dependency

  scope :patchable, -> {
    joins(:vulnerable_dependency).merge(VulnerableDependency.patchable)
  }

  scope :unpatchable, -> {
    current_scope.merge(VulnerableDependency.unpatchable)
  }

  scope :in_bundles_from, -> (account) {
    joins(:bundle).merge(account.bundles)
  }

  # todo: document
  scope :that_are_unpatched, -> {
    where("patched IS FALSE")
  }

  scope :that_are_patched, -> {
    where("patched IS TRUE")
  }


  scope :unpatched_as_of, -> (end_at) {
    joins(:vulnerable_dependency).
      where("patched IS FALSE OR patched_at <= ?", end_at).
      where("vulnerable_dependencies.valid_at <= ?", end_at)
  }

  scope :vulnerable_after, -> (begin_at) {
    joins(:vulnerable_dependency).
      where("vulnerable_dependencies.created_at >= ?", begin_at)
  }


  scope :vulnerable_before, -> (begin_at) {
    joins(:vulnerable_dependency).
      where("vulnerable_dependencies.created_at < ?", begin_at)
  }

  def self.refresh
    ActiveRecord::Base.connection.execute('REFRESH MATERIALIZED VIEW CONCURRENTLY vulnerability_logs')
  end

end
