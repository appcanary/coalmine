# == Schema Information
#
# Table name: vulnerabilities
#
#  id                  :integer          not null, primary key
#  package_platform    :string           not null
#  package_names       :string           default("{}"), not null, is an Array
#  affected_arches     :string           default("{}"), not null, is an Array
#  affected_releases   :string           default("{}"), not null, is an Array
#  patched_versions    :jsonb            default("{}"), not null
#  unaffected_versions :jsonb            default("{}"), not null
#  title               :string
#  description         :text
#  criticality         :string
#  cve_ids             :string           default("{}"), not null, is an Array
#  osvdb_id            :string
#  usn_id              :string
#  dsa_id              :string
#  rhsa_id             :string
#  cesa_id             :string
#  source              :string
#  reported_at         :datetime
#  created_at          :datetime         not null
#  updated_at          :datetime         not null
#  valid_at            :datetime         not null
#  expired_at          :datetime         default("infinity"), not null
#

class Vulnerability < ActiveRecord::Base
  has_many :vulnerable_dependencies
  has_many :vulnerable_packages
  has_many :packages, :through => :vulnerable_packages

  has_many :advisory_vulnerabilities
  has_many :advisories, :through => :advisory_vulnerabilities

  before_validation :enforce_versions_shape

  # TODO VALIDATE patched, unaffected versions
  # format.

  def affects?(package)
    self.vulnerable_dependencies.select { |vd|
      vd.concerns?(package) 
    }.any? { |vd|
      vd.affects?(package) 
    }
  end

  def concerned_packages()
    Package.joins("inner join vulnerable_dependencies vd on platform = vd.package_platform").where("name = package_name OR source_name = package_name").where("vulnerability_id = ?", self.id)
  end

  def patched_versions_for(name)
    self.patched_versions[name] || []
  end

  def unaffected_versions_for(name)
    self.unaffected_versions[name] || []
  end

  # very brittle, do not like.
  def enforce_versions_shape
    if unaffected_versions.blank?
      self.unaffected_versions = {}
    elsif !(unaffected_versions.is_a? Hash)
      self.errors.add(:unaffected_versions, :invalid)
    end

    if patched_versions.blank?
      self.patched_versions = {}
    elsif !(patched_versions.is_a? Hash)
      self.errors.add(:patched_versions, :invalid)
    end
  end

  def self.attribute_names
    self.column_names - ["id", "created_at", "updated_at", "valid_at", "expired_at"]
  end

end
