# == Schema Information
#
# Table name: vulnerability_archives
#
#  id               :integer          not null, primary key
#  vulnerability_id :integer          not null
#  platform         :string           not null
#  title            :string
#  description      :text
#  criticality      :string
#  reference_ids    :string           default("{}"), not null, is an Array
#  osvdb_id         :string
#  usn_id           :string
#  dsa_id           :string
#  rhsa_id          :string
#  cesa_id          :string
#  source           :string
#  reported_at      :datetime
#  created_at       :datetime         not null
#  updated_at       :datetime         not null
#  valid_at         :datetime         not null
#  expired_at       :datetime         not null
#
# Indexes
#
#  idx_vulnerability_id_ar                     (vulnerability_id)
#  index_vulnerability_archives_on_expired_at  (expired_at)
#  index_vulnerability_archives_on_platform    (platform)
#  index_vulnerability_archives_on_valid_at    (valid_at)
#

class VulnerabilityArchive < ActiveRecord::Base
  belongs_to :current, :class_name => Vulnerability, :foreign_key => :vulnerability_id

  enum criticality: Advisory::CRITICALITIES


  def vulnerable_dependencies
    q1 = VulnerableDependencyArchive.where(:vulnerability_id => self.vulnerability_id).
      where("? <= vulnerable_dependency_archives.valid_at and
             ? >  vulnerable_dependency_archives.valid_at", valid_at, expired_at).
             select(current_column_select)

    q2 = VulnerableDependency.where(:vulnerability_id => self.vulnerability_id).
    where("? <= vulnerable_dependencies.valid_at and
           ? >  vulnerable_dependencies.valid_at", valid_at, expired_at)

    sql = VulnerableDependency.connection.unprepared_statement { 
      "((#{q1.to_sql}) UNION (#{q2.to_sql})) as vulnerable_dependencies"
    }

    VulnerableDependency.from(sql)
  end

  def current_column_select
    VulnerableDependencyArchive.column_names.reduce([]) { |arr, col|
      if col == "vulnerable_dependency_id"
        arr << "vulnerable_dependency_id id"
      elsif col != "id"
        arr << col
      end
      arr
    }.join(", ")
  end

  def archives
    []
  end
end
