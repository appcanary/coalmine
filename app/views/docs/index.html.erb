<section id="docs">
  <div class="fixed-side-menu">
    <div class="outer-wrapper">
      <div class="inner-wrapper">
        <div style="margin-top: 20px;">
          <%= image_tag "canary-map.medium.stroke.png", :style => "width: 150px" %>
          <h2 style="text-align: center">API Docs</h2>
        </div>
        <ul class="nav nav-pills nav-stacked">
          <h4>Getting started</h4>
          <li><a href="#authentication">Authentication</a></li>
          <h4>Check API</h4>
          <li><a href="#check-endpoint">Check Endpoint</a></li>
          <li><a href="#check-responses">Check Response</a></li>
          <h4>Monitor API</h4>
          <li><a href="#create-monitor">Create a Monitor</a></li>
          <li><a href="#update-monitor">Update a Monitor</a></li>
          <li><a href="#list-monitors">List Monitors</a></li>
          <li><a href="#show-monitor">Show a Monitor</a></li>
          <li><a href="#delete-monitor">Delete a Monitor</a></li>
          <h4>In the event of failure</h4>
          <li><a href="#errors">Error Response</a></li>
          <li><a href="#feedback">Questions? Feedback?</a></li>
        </ul>

      </div>
    </div>
  </div>
  <div class="col-sm-7">
    <a name="start" class="anchor-offset"></a>
    <h1>Hello!</h1>
    <p>Welcome to Appcanary. The purpose of this documentation is to show you how to connect to our service. This API and accompanying documentation is in beta, pending feedback from users just like you.</p> 
    <p><strong>Please tell us what you think!</strong> You can email us at <a href="hello@appcanary.com>hello@appcanary.com</a>.</p>

    <p>Also, we will be careful and try to communicate this clearly when it happens, but as this API is still in development, we may ship breaking changes.</p>

    <hr>
    <a name="authentication" class="anchor-offset"></a>
    
    <h2>Authentication</h2>
    <h4>⤻ <code>GET https://appcanary.com/api/v2/status</code></h4>
    <p>All communication with our APIs require your API key to be included as an <code>Authentication</code> header. These can be set in <code>curl</code> like so:</p>
    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
     https://appcanary.com/api/v2/status</pre>

    <p>The status endpoint shown above will respond appropriately if your request is authenticated and your account is in good standing.</p>
    <hr>
    <a name="check-endpoint" class="anchor-offset"></a>
    <h2>Check Endpoint</h2>
    <h4>⤻ <code>POST https://appcanary.com/api/v2/check/:platform/:release</code></h4>

    <p>Check your dependencies for vulnerabilities. For example, with Ruby:</p>
    
    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
     -X POST -F <strong>file</strong>=@./Gemfile.lock \
     https://appcanary.com/api/v2/check/<strong>ruby</strong>
</pre>

    <h4>Required path parameters</h4>
    <%= render :partial => "platform_release" %>

    <h4>Required query parameters</h4>
    <%= render :partial => "file" %>
    <hr>

    <p>The purpose of this endpoint is to show which vulnerabilities your app's dependencies are affected by.</p> 
    <p>At the moment we only accept requests with <code>Content-Type: multipart/form-data</code> with an embedded <code>application/octet-stream</code>. If you need to send data in a different format, please let us <a href="mailto:hello@appcanary.com">know</a>.</p>

    <h4>Please note!</h4>
    <p>We cache requests. We strive to discard sensitive information but be mindful when submitting files containing credentials.</p>
    <p>All requests are currently unmetered. This may change as appropriate.</p>

    <hr>
    <a name="check-responses" class="anchor-offset"></a>
    <h2>Check Responses</h2>
    <p>Successful requests will have a <code>200 OK</code> response code containing <code>application/json</code> data.</p>
    <p>All successful responses will be wrapped in a <code>"data"</code> container object and contain a <code>"vulnerable"</code> boolean field. This container object <strong>shall always</strong> contain an array, whether it's empty or not. This schema is loosely based on the <a href="http://jsonapi.org/">jsonapi</a> spec.</p>
    <p>For example, if your dependency file does not have any known vulnerabilities, the response body will look like this:</p>
    <pre class="json">
{
  "vulnerable": false,
  "data": []
}
</pre>
    
    <h4>The response container object</h4>
    <% render :partial => "response_coll" %>

    <p>However, if your app does have vulnerable dependencies, then the container object will consist of a series of <code>artifact-version</code> objects, and look like the following example response:</p>
        <pre class="json">
{
  "vulnerable": true,
  "data": [
    {
      "type": "artifact-version",
      "attributes": {
        "name": "rack",
        "kind": "rubygem",
        "number": "1.6.0",
        "vulnerabilities": [
          {
            "title": "Potential Denial of Service Vulnerability in Rack",
            "description": "Carefully crafted requests can cause a `SystemStackError` and potentially \ncause a denial of service attack. \n\nAll users running an affected release should upgrade.",
            "criticality": "high",
            "cve": [
              "CVE-2015-3225"
            ],
            "osvdb": [],
            "patched-versions": [
              "~&lt; 1.5.4",
              "~&lt; 1.4.6",
              "&gt;= 1.6.2"
            ],
            "unaffected-versions": [],
            "uuid": "55807540-053f-40f0-9266-a3d1ca6a5838",
            "upgrade-to": [
              "&gt;= 1.6.2"
            ]
          }
        ]
      }
    }
  ]
}
</pre>
    <h4>ArtifactVersion container object</h4>
    <%= render :partial => "artifact_version_container" %>

    <h4>ArtifactVersion attributes object</h4>
    <%= render :partial => "artifact_version" %>

    <h4>Vulnerability object</h4>
    <%= render :partial => "vulnerability" %>

    <hr>

    <a name="create-monitor" class="anchor-offset"></a>
    <h2>Create a Monitor</h2>
    <p>A <em>monitor</em> is used to send us a set of packages to watch. You upload a file kind we support, and we will email you updates whenever any of the packages in it have a known vulnerability.</p>
    <p>It's like registering a server using our agent, but you get complete control of what we're watching using the Monitor API.</p>
    <p>Every monitor has a name unique to your account. You can specify the
    monitor's name, or let us generate one for you.</p>
    <h3>Create a named Monitor</h3>
    <h4>⤻ <code>POST https://appcanary.com/api/v2/monitors/:name?platform=:platform&release=:release</code></h4>

    <p>Creates a monitor with the specified name. For example, with Ubuntu:</p>
    
    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
      -X POST -F <strong>file</strong>=@/var/lib/dpkg/status \
      https://appcanary.com/api/v2/monitors/<strong>my-server-name</strong>?kind=<strong>ubuntu</strong>&release=<strong>12.04</strong></pre>

    <h3>Create a unnamed Monitor</h3>
    <h4>⤻ <code>POST https://appcanary.com/api/v2/monitors?platform=:platform&release=:release</code></h4>

    <p>Creates a monitor. We will return an auto-generated name. For example, with Ubuntu:</p>
    
    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
      -X POST -F <strong>file</strong>=@/var/lib/dpkg/status \
      https://appcanary.com/api/v2/monitors?kind=<strong>ubuntu</strong>&release=<strong>12.04</strong></pre>


    <h4>Optional path parameters</h4>
    <dl class="dl-horizontal">
      <dt>name</dt>
      <dd>The name of the monitor you want to create, form encoded.
        <br/>
        If unspecified, we will generate one for you.
      </dd>
    </dl>

    <h4>Required URL query parameters</h4>
    <%= render :partial => "platform_release" %>

    <h4>Required query parameters</h4>
    <%= render :partial => "file" %>
    <hr>

    <a name="create-monitor-responses" class="anchor-offset"></a>
    <h2>Create Monitor Response</h2>
    <p>Successful requests will have a <code>201 CREATED</code> response code containing <code>application/json</code> data.</p>
    <p>All successful responses will be wrapped in a <code>"data"</code> container object.
    <p>For example, a response body will look like this:</p>
    <pre class="json">
{
  "data": {
    "type": "monitor",
    "attributes": {
      "name": "my-server",
      "uuid": "56eac124-35c2-49bd-ab02-45de56c03ef4",
      "is-vulnerable": true
    }
  }
}
</pre>
    
    <h4>The response container object</h4>
    <%= render :partial => "response_single" %>

    <h4>Monitor object</h4>
    <%= render :partial => "monitor" %>
    <hr>
    <a name="errors" class="anchor-offset"></a>


    <a name="update-monitor" class="anchor-offset"></a>
    <h2>Update a Monitor</h2>
    <p>When you change the dependencies of a server or app you're monitoring, you update the monitor.</p>
    <h4>⤻ <code>PUT https://appcanary.com/api/v2/monitors/:name</code></h4>

    <p>Updates a monitor with the specified name with the contents of file. For example, with Ubuntu:</p>
    
    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
      -X PUT -F <strong>file</strong>=@/var/lib/dpkg/status \
      https://appcanary.com/api/v2/monitors/<strong>my-server-name</strong></pre>


    <h4>Required path parameters</h4>
    <%= render :partial => "monitor_name" %> 

    <h4>Required query parameters</h4>
    <%= render :partial => "file" %>

    <hr>

    <a name="update-monitor-responses" class="anchor-offset"></a>
    <h2>Update Monitor Response</h2>
    <p>Successful requests will have a <code>200 OK</code> response code containing <code>application/json</code> data.</p>
    <p>All successful responses will be wrapped in a <code>"data"</code> container object.

    <p>For example, a response body will look like this:</p>
    <pre class="json">
{
  "data": {
    "type": "monitor",
    "attributes": {
      "name": "my-server",
      "uuid": "56eac124-35c2-49bd-ab02-45de56c03ef4",
      "is-vulnerable": true
    }
  }
}
</pre>
    
    <h4>The response container object</h4>
    <%= render :partial => "response_single" %>

    <h4>Monitor object</h4>
    <%= render :partial => "monitor" %>

    <hr>

    <a name="list-monitors" class="anchor-offset"></a>
    <h2>List Monitors</h2>
    <p>To list all of the monitors you have registered:</p>
    <h4>⤻ <code>GET https://appcanary.com/api/v2/monitors</code></h4>

    <p>For example</p>
    
    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
      https://appcanary.com/api/v2/monitors/</pre>

    <hr>

    <a name="list-monitors-response" class="anchor-offset"></a>
    <h2>List Monitors Response</h2>
    <p>Successful requests will have a <code>200 OK</code> response code containing <code>application/json</code> data, which shall always contain an array.</p>
    <p>All successful responses will be wrapped in a <code>"data"</code> container object.

    <p>For example, a response body will look like this:</p>
    <pre class="json">
{
  "data": [
    {
      "type": "monitor",
      "attributes": {
        "name": "my-server",
        "uuid": "56ded706-d01d-4727-b13c-dd630b0c3c15",
        "is-vulnerable": true
      }
    },
    {
      "type": "monitor",
      "attributes": {
        "name": "my-ruby-app",
        "uuid": "56e03f35-f1b5-48a8-bce7-31394d908c83",
        "is-vulnerable": true
      }
    }
  ]
}
</pre>
    
    <h4>The response container object</h4>
    <%= render :partial => "response_coll" %>

    <h4>Monitor object</h4>
    <%= render :partial => "monitor" %>

    <hr>

    <a name="show-monitor" class="anchor-offset"></a>
    <h2>Show Monitor</h2>
    <p>To show details about a specific monitor:</p>
    <h4>⤻ <code>GET https://appcanary.com/api/v2/monitors/<strong>:name</strong></code></h4>

    <p>For example</p>
    
    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
      https://appcanary.com/api/v2/monitors/my-server</pre>

    <h4>Required path parameters</h4>
    <%= render :partial => "platform_release" %>
    <hr>


    <a name="show-monitor-response" class="anchor-offset"></a>
    <h2>Show Monitors Response</h2>
    <p>Successful requests will have a <code>200 OK</code> response code containing <code>application/json</code> data.</p>
    <p>All successful responses will be wrapped in a <code>"data"</code> container object.

    <p>For example, a response body will look like this:</p>
    <pre class="json">
{
  "data": {
    "type": "monitor",
    "attributes": {
      "name": "centos-server",
      "uuid": "56ded718-b01d-4948-840a-45ea73d3bf97",
      "is-vulnerable": true,
      "vulnerable-versions": [
        {
          "type": "artifact-version",
          "attributes": {
            "name": "kernel-devel",
            "kind": "centos",
            "number": "3.10.0-229.el7",
            "arch": "x86_64",
            "vulnerabilities": [
              {
                "description": " The kernel packages contain the Linux kernel, the core of any Linux operating system. * A flaw was found in the kernel's implementation of the Berkeley Packet Filter (BPF). A local attacker could craft BPF code to crash the system by creating a situation in which the JIT compiler would fail to correctly optimize the JIT image on the last pass. This would lead to the CPU executing instructions that were not part of the JIT code. (CVE-2015-4700, Important) * Two flaws were found in the way the Linux kernel's networking implementation handled UDP packets with incorrect checksum values. A remote attacker could potentially use these flaws to trigger an infinite loop in the kernel, resulting in a denial of service on the system, or cause a denial of service in applications using the edge triggered epoll functionality. (CVE-2015-5364, CVE-2015-5366, Important) * A flaw was found in the way the Linux kernel's ext4 file system handled the \"page size > block size\" condition when the fallocate zero range functionality was used. A local attacker could use this flaw to crash the system. (CVE-2015-0275, Moderate) * It was found that the Linux kernel's keyring implementation would leak memory when adding a key to a keyring via the add_key() function. A local attacker could use this flaw to exhaust all available memory on the system. (CVE-2015-1333, Moderate) * A race condition flaw was found in the way the Linux kernel's SCTP implementation handled Address Configuration lists when performing Address Configuration Change (ASCONF). A local attacker could use this flaw to crash the system via a race condition triggered by setting certain ASCONF options on a socket. (CVE-2015-3212, Moderate) * An information leak flaw was found in the way the Linux kernel's Virtual Dynamic Shared Object (vDSO) implementation performed address randomization. A local, unprivileged user could use this flaw to leak kernel memory addresses to user-space. (CVE-2014-9585, Low) Red Hat would like to thank Daniel Borkmann for reporting CVE-2015-4700, and Canonical for reporting the CVE-2015-1333 issue. The CVE-2015-0275 issue was discovered by Xiong Zhou of Red Hat, and the CVE-2015-3212 issue was discovered by Ji Jianwen of Red Hat Engineering. This update also fixes several bugs. Refer to the following Knowledgebase article for further information: https://access.redhat.com/articles/1614563 All kernel users are advised to upgrade to these updated packages, which contain backported patches to correct these issues. The system must be rebooted for this update to take effect. ",
                "osvdb": [],
                "upgrade-to": [
                  "kernel-devel-3.10.0-229.14.1.el7.x86_64"
                ],
                "criticality": "high",
                "rhsa": [
                  "RHSA-2015:1778"
                ],
                "cve": [
                  "CVE-2015-4700",
                  "CVE-2014-9585",
                  "CVE-2015-0275",
                  "CVE-2015-3212",
                  "CVE-2015-1333",
                  "CVE-2015-5366",
                  "CVE-2015-5364"
                ],
                "title": "Important CentOS kernel Security Update",
                "uuid": "56ca960e-a7b0-44d6-9e02-2bdb3b00aeef",
                "unaffected-versions": [],
                "patched-versions": [
                  "kernel-devel-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-abi-whitelists-3.10.0-229.14.1.el7.noarch.rpm",
                  "perf-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-debug-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-doc-3.10.0-229.14.1.el7.noarch.rpm",
                  "kernel-tools-libs-devel-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-tools-libs-3.10.0-229.14.1.el7.x86_64.rpm",
                  "python-perf-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-3.10.0-229.14.1.el7.src.rpm",
                  "kernel-debug-devel-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-tools-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-headers-3.10.0-229.14.1.el7.x86_64.rpm"
                ]
              }
            ]
          }
        }
      ]
    }
  }
}
    </pre>
    
    <h4>The response container object</h4>
    <%= render :partial => "response_single" %>

    <h4>Monitor object</h4>
    <%= render :partial => "monitor_detailed" %>

    <h4>ArtifactVersion container object</h4>
    <%= render :partial => "artifact_version_container" %>

    <h4>ArtifactVersion attributes object</h4>
    <%= render :partial => "artifact_version" %>

    <h4>Vulnerability object</h4>
    <%= render :partial => "vulnerability" %>

    <hr>

    <a name="delete-monitor" class="anchor-offset"></a>
    <h2>Delete Monitor</h2>
    <p>To delete a monitor you have previously registered</p>
    <h4>⤻ <code>DELETE https://appcanary.com/api/v2/monitors/<strong>:name</strong></code></h4>

    <p>For example</p>
    
    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
      https://appcanary.com/api/v2/monitors/</pre>

    <hr>

    <h2>Delete Monitors Response</h2>
    <p>Successful requests will have a <code>204 NO CONTENT</code> response code containing no data.</p>

    <hr>

    <h2>Errors</h2>
    <p>Occasionally, we won't be able to process your request. We'll try to give you meaningful hints. All responses shall have a 400 or 500 series status - most commonly one of: <code>400 Bad Request</code>, <code>422 Unprocessable Entity</code> or <code>500 Internal Server Error</code>.</p>
    <p>A sample error request looks like the following:</p>
    <pre class="json">
{
  "errors": [
    {
      "title": "Validation error",
      "details": {
        "file": "missing-required-key"
      }
    }
  ]
}</pre>

    <p>When responding with an error, the API shall always omit the <code>data</code> container object and return instead an <code>errors</code> object, which shall always contain an array.</p>

    <h4>The error object</h4>
    <dl class="dl-horizontal">
      <dt>title</dt>
      <dd>A human readable description of the problem.</dd>

      <dt>details</dt>
      <dd>A series of keys and values meant to provide clues or context as to what went wrong.</dd>

    </dl>

    <hr>
    <a name="feedback" class="anchor-offset"></a>
    <h2>Questions? Feedback?</h2>

    <p>Let us know. Hit "Feedback" on the bar up top or contact us at <a href="mailto:hello@appcanary.com">hello@appcanary.com</a>. Include as much detail or context as possible. Thanks!</p>
   
  </div>
</section>
