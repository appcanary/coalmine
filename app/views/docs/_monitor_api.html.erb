<a name="create-monitor" class="anchor-offset"></a>
<h1>Monitor API</h1>
  <p>A <em>monitor</em> lets you register a set of packages for us to keep a watch on.</p>

    <p>Send us information on packages on platforms we support, and we will email you updates whenever any of the packages listed have a known vulnerability. It's like registering a server using our agent, but you get complete control of what we're watching and how often it gets updated.</p>

    <h2>Create Request</h2>
    <h4><code>POST https://appcanary.com/api/v2/monitors/:name?platform=:platform&release=:release</code></h4>

    <p>Every monitor has a name unique to your account. You can specify the monitor's name, or let us generate one for you. Creates a monitor with an optionally specified name. For example, with Ubuntu:</p>
    
    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
      -X POST -F <strong>file</strong>=@/var/lib/dpkg/status \
      "https://appcanary.com/api/v2/monitors/<strong>my-server</strong>?platform=<strong>ubuntu</strong>&amp;release=<strong>12.04</strong>"</pre>

    <h4>Optional path parameters</h4>
    <dl class="dl-horizontal">
      <dt>name</dt>
      <dd>The name of the monitor you want to create, form encoded.
        <br/>
        If unspecified, we will generate one for you.
      </dd>
    </dl>

    <h4>Required URL query parameters</h4>
    <%= render :partial => "platform_release_parameters" %>

    <h4>Required query parameters</h4>
    <%= render :partial => "file_parameter" %>
    <hr>

    <a name="create-monitor-responses" class="anchor-offset"></a>
    <h2>Create Response</h2>
    <p>Successful requests will have a <code>201 CREATED</code> response code containing <code>application/json</code> data.</p>
    <p>All successful responses will be wrapped in a <code>"data"</code> container object.
    <p>For example, a response body will look like this:</p>
    <pre class="json">
{
  "data": {
    "type": "monitor",
    "attributes": {
      "name": "my-server",
      "uuid": "56eac124-35c2-49bd-ab02-45de56c03ef4",
      "is-vulnerable": true
    }
  }
}
</pre>
    
    <h4>The response container object</h4>
    <%= render :partial => "response_container_fields" %>

    <h4>Monitor object</h4>
    <%= render :partial => "monitor_fields" %>
    <hr>
    <br/>
    <br/>

<a name="show-monitor" class="anchor-offset"></a>
 <h2>Show Monitor</h2>
    <p>To show details about a specific monitor:</p>
    <h4><code>GET https://appcanary.com/api/v2/monitors/<strong>:name</strong></code></h4>

    <p>For example</p>

    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
      https://appcanary.com/api/v2/monitors/<strong>my-server</strong></pre>

    <h4>Required path parameters</h4>
    <%= render :partial => "monitor_name" %>

    <h2>Show Monitors Response</h2>
    <p>Successful requests will have a <code>200 OK</code> response code containing <code>application/json</code> data.</p>
    <p>All successful responses will be wrapped in a <code>"data"</code> container object.

    <p>For example, a response body will look like this:</p>
    <pre class="json">
{
  "data": {
    "type": "monitor",
    "attributes": {
      "name": "centos-server",
      "uuid": "56ded718-b01d-4948-840a-45ea73d3bf97",
      "is-vulnerable": true,
      "vulnerable-versions": [
        {
          "type": "artifact-version",
          "attributes": {
            "name": "kernel-devel",
            "kind": "centos",
            "number": "3.10.0-229.el7",
            "arch": "x86_64",
            "vulnerabilities": [
              {
                "description": " The kernel packages contain the Linux kernel, the core of any Linux operating system. * A flaw was found in the kernel's implementation of the Berkeley Packet Filter (BPF). A local attacker could craft BPF code to crash the system by creating a situation in which the JIT compiler would fail to correctly optimize the JIT image on the last pass. This would lead to the CPU executing instructions that were not part of the JIT code. (CVE-2015-4700, Important) * Two flaws were found in the way the Linux kernel's networking implementation handled UDP packets with incorrect checksum values. A remote attacker could potentially use these flaws to trigger an infinite loop in the kernel, resulting in a denial of service on the system, or cause a denial of service in applications using the edge triggered epoll functionality. (CVE-2015-5364, CVE-2015-5366, Important) * A flaw was found in the way the Linux kernel's ext4 file system handled the \"page size > block size\" condition when the fallocate zero range functionality was used. A local attacker could use this flaw to crash the system. (CVE-2015-0275, Moderate) * It was found that the Linux kernel's keyring implementation would leak memory when adding a key to a keyring via the add_key() function. A local attacker could use this flaw to exhaust all available memory on the system. (CVE-2015-1333, Moderate) * A race condition flaw was found in the way the Linux kernel's SCTP implementation handled Address Configuration lists when performing Address Configuration Change (ASCONF). A local attacker could use this flaw to crash the system via a race condition triggered by setting certain ASCONF options on a socket. (CVE-2015-3212, Moderate) * An information leak flaw was found in the way the Linux kernel's Virtual Dynamic Shared Object (vDSO) implementation performed address randomization. A local, unprivileged user could use this flaw to leak kernel memory addresses to user-space. (CVE-2014-9585, Low) Red Hat would like to thank Daniel Borkmann for reporting CVE-2015-4700, and Canonical for reporting the CVE-2015-1333 issue. The CVE-2015-0275 issue was discovered by Xiong Zhou of Red Hat, and the CVE-2015-3212 issue was discovered by Ji Jianwen of Red Hat Engineering. This update also fixes several bugs. Refer to the following Knowledgebase article for further information: https://access.redhat.com/articles/1614563 All kernel users are advised to upgrade to these updated packages, which contain backported patches to correct these issues. The system must be rebooted for this update to take effect. ",
                "osvdb": [],
                "upgrade-to": [
                  "kernel-devel-3.10.0-229.14.1.el7.x86_64"
                ],
                "criticality": "high",
                "rhsa": [
                  "RHSA-2015:1778"
                ],
                "cve": [
                  "CVE-2015-4700",
                  "CVE-2014-9585",
                  "CVE-2015-0275",
                  "CVE-2015-3212",
                  "CVE-2015-1333",
                  "CVE-2015-5366",
                  "CVE-2015-5364"
                ],
                "title": "Important CentOS kernel Security Update",
                "uuid": "56ca960e-a7b0-44d6-9e02-2bdb3b00aeef",
                "unaffected-versions": [],
                "patched-versions": [
                  "kernel-devel-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-abi-whitelists-3.10.0-229.14.1.el7.noarch.rpm",
                  "perf-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-debug-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-doc-3.10.0-229.14.1.el7.noarch.rpm",
                  "kernel-tools-libs-devel-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-tools-libs-3.10.0-229.14.1.el7.x86_64.rpm",
                  "python-perf-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-3.10.0-229.14.1.el7.src.rpm",
                  "kernel-debug-devel-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-tools-3.10.0-229.14.1.el7.x86_64.rpm",
                  "kernel-headers-3.10.0-229.14.1.el7.x86_64.rpm"
                ]
              }
            ]
          }
        }
      ]
    }
  }
}
    </pre>
    
    <h4>The response container object</h4>
    <%= render :partial => "response_container_fields" %>

    <h4>Monitor object</h4>
    <%= render :partial => "monitor_fields" %>

    <h4>ArtifactVersion container object</h4>
    <%= render :partial => "artifact_version_container_fields" %>

    <h4>ArtifactVersion attributes object</h4>
    <%= render :partial => "artifact_version_fields" %>

    <h4>Vulnerability object</h4>
    <%= render :partial => "vulnerability_fields" %>


<hr>
<br/>
<br/>


    <a name="update-monitor" class="anchor-offset"></a>
    <h2>Update a Monitor</h2>
    <p>Whenever a monitored server's or app's packages changes, you'll want to update the monitor.</p>
    <h4><code>PUT https://appcanary.com/api/v2/monitors/:name</code></h4>

    <p>Updates a monitor with the specified name with the contents of file. For example, with Ubuntu:</p>
    
    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
      -X PUT -F <strong>file</strong>=@/var/lib/dpkg/status \
      https://appcanary.com/api/v2/monitors/<strong>my-server</strong></pre>


    <h4>Required path parameters</h4>
    <%= render :partial => "monitor_name" %> 

    <h4>Required query parameters</h4>
    <%= render :partial => "file_parameter" %>

    <hr>

    <a name="update-monitor-responses" class="anchor-offset"></a>
    <h2>Update Monitor Response</h2>
    <p>Successful requests will have a <code>200 OK</code> response code containing <code>application/json</code> data.</p>
    <p>All successful responses will be wrapped in a <code>"data"</code> container object.

    <p>For example, a response body will look like this:</p>
    <pre class="json">
{
  "data": {
    "type": "monitor",
    "attributes": {
      "name": "my-server",
      "uuid": "56eac124-35c2-49bd-ab02-45de56c03ef4",
      "is-vulnerable": true
    }
  }
}
</pre>
    
    <h4>The response container object</h4>
    <%= render :partial => "response_container_fields" %>

    <h4>Monitor object</h4>
    <%= render :partial => "monitor_fields" %>

    <hr/>
    <br/>
    <br/>

<a name="delete-monitor" class="anchor-offset"></a>
    <h2>Delete Monitor</h2>
    <p>To delete a monitor you have previously registered</p>
    <h4><code>DELETE https://appcanary.com/api/v2/monitors/<strong>:name</strong></code></h4>

    <p>For example</p>
    
    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
      https://appcanary.com/api/v2/monitors/</pre>


    <h2>Delete Monitors Response</h2>
    <p>Successful requests will have a <code>204 NO CONTENT</code> response code containing no data.</p>


    <hr>
    <br/>
    <br/>

    <a name="list-monitors" class="anchor-offset"></a>
    <h2>List Monitors</h2>
    <p>To list all of the monitors you have registered:</p>
    <h4><code>GET https://appcanary.com/api/v2/monitors</code></h4>

    <p>For example</p>
    
    <pre class="bash">curl -H "Authorization: Token <%= @user.agent_token %>" \
      https://appcanary.com/api/v2/monitors/</pre>


    <a name="list-monitors-response" class="anchor-offset"></a>
    <h2>List Monitors Response</h2>
    <p>Successful requests will have a <code>200 OK</code> response code containing <code>application/json</code> data, which shall always contain an array.</p>
    <p>All successful responses will be wrapped in a <code>"data"</code> container object.

    <p>For example, a response body will look like this:</p>
    <pre class="json">
{
  "data": [
    {
      "type": "monitor",
      "attributes": {
        "name": "my-server",
        "uuid": "56ded706-d01d-4727-b13c-dd630b0c3c15",
        "is-vulnerable": true
      }
    },
    {
      "type": "monitor",
      "attributes": {
        "name": "my-ruby-app",
        "uuid": "56e03f35-f1b5-48a8-bce7-31394d908c83",
        "is-vulnerable": true
      }
    }
  ]
}
</pre>
    
    <h4>The response container object</h4>
    <%= render :partial => "response_coll_container_fields" %>

    <h4>Monitor object</h4>
    <%= render :partial => "monitor_fields" %>

